#!/bin/bash

#Source it in your .zshrc file

export FLUTTER_WORKSPACE_DIRECTORY="/flutter_workspace/flutter_skeleton"
export FLUTTER_FRONTEND_WORKSPACE_DIRECTORY="$FLUTTER_WORKSPACE_DIRECTORY/frontend"
export FLUTTER_BACKEND_WORKSPACE_DIRECTORY="$FLUTTER_WORKSPACE_DIRECTORY/backend"

export CREDENTIALS_FOLDER="$FLUTTER_WORKSPACE_DIRECTORY/credentials"

alias ft="cd /flutter_workspace/flutter_skeleton"
alias ftf="cd /flutter_workspace/flutter_skeleton/frontend"
alias ftb="cd /flutter_workspace/flutter_skeleton/backend"

runServerDev() {
    sudo systemctl start mongod
    DEV=1 nodemon $FLUTTER_BACKEND_WORKSPACE_DIRECTORY/app/index.js

    #If mongo start fail : run the command : sudo rm -rf /tmp/mongodb-27017.sock
}

importFakeCottages() {
    mongoimport --jsonArray --db myapp --collection cottages --file $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY/assets/cottages.json
}

cleanDb() {
    mongo myapp --eval "db.dropDatabase()"
}

#Check if analyze and format command returns ok
checkPaulette() {
    flutter format --set-exit-if-changed /flutter_workspace/flutter_skeleton/frontend &&
        flutter analyze /flutter_workspace/flutter_skeleton/frontend
}

pushPaulette() {
    checkPaulette &&
        git push origin $1
}

installPaulette() {
    session=$(bw unlock --raw)

    bw sync --session $session

    credentials=$(bw get password BACKEND_GOOGLE_CREDENTIALS --session $session) &&
        rm -f $CREDENTIALS_FOLDER/credentials.json &&
        echo $credentials >>$CREDENTIALS_FOLDER/credentials.json

    tokens=$(bw get password BACKEND_GOOGLE_TOKEN --session $session) &&
        rm -f $CREDENTIALS_FOLDER/token.json &&
        echo $tokens >>$CREDENTIALS_FOLDER/token.json

    oauth_config=$(bw get password BACKEND_OAUTH_CONFIG --session $session) &&
        rm -f $CREDENTIALS_FOLDER/oauth_config.json &&
        echo $oauth_config >>$CREDENTIALS_FOLDER/oauth_config.json
}
