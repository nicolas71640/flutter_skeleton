// Mocks generated by Mockito 5.2.0 from annotations
// in avecpaulette/test/features/home/presentation/bloc/home_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:avecpaulette/features/home/domain/entities/itinerary.dart'
    as _i6;
import 'package:avecpaulette/features/home/domain/entities/location_entity.dart'
    as _i8;
import 'package:avecpaulette/features/home/domain/repositories/itinerary_repository.dart'
    as _i2;
import 'package:avecpaulette/features/home/domain/repositories/location_repository.dart'
    as _i3;
import 'package:avecpaulette/features/home/domain/usecases/itinerary_usecase.dart'
    as _i4;
import 'package:avecpaulette/features/home/domain/usecases/location_usecase.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeItineraryRepository_0 extends _i1.Fake
    implements _i2.ItineraryRepository {}

class _FakeLocationRepository_1 extends _i1.Fake
    implements _i3.LocationRepository {}

/// A class which mocks [ItineraryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockItineraryUseCase extends _i1.Mock implements _i4.ItineraryUseCase {
  MockItineraryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ItineraryRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeItineraryRepository_0()) as _i2.ItineraryRepository);
  @override
  _i5.Stream<_i6.Itinerary> call(String? from, String? to) =>
      (super.noSuchMethod(Invocation.method(#call, [from, to]),
              returnValue: Stream<_i6.Itinerary>.empty())
          as _i5.Stream<_i6.Itinerary>);
}

/// A class which mocks [LocationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationUseCase extends _i1.Mock implements _i7.LocationUseCase {
  MockLocationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LocationRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeLocationRepository_1()) as _i3.LocationRepository);
  @override
  _i5.Stream<_i8.LocationEntity> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue: Stream<_i8.LocationEntity>.empty())
          as _i5.Stream<_i8.LocationEntity>);
}
