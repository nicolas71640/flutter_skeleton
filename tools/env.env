#!/bin/bash

#Source it in your .zshrc file

getIpAddress()
{
    domainName=$1
    echo $(ping -c 1 $domainName| gawk -F'[()]' '/PING/{print $2}')
}
serverContainerIp=$(getIpAddress server)

export PUB_CACHE="$FLUTTER_WORKSPACE_DIRECTORY/frontend/.pub-cache"
export FLUTTER_FRONTEND_WORKSPACE_DIRECTORY="$FLUTTER_WORKSPACE_DIRECTORY/frontend"
export FLUTTER_BACKEND_WORKSPACE_DIRECTORY="$FLUTTER_WORKSPACE_DIRECTORY/backend"
export CREDENTIALS_FOLDER="$FLUTTER_WORKSPACE_DIRECTORY/credentials"
export SERVER_BASE_URL="http://$serverContainerIp:3000/api"
export ANDROID_USER_HOME=/root/.android


alias ft="cd $FLUTTER_WORKSPACE_DIRECTORY"
alias ftf="cd $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY"
alias ftb="cd FLUTTER_BACKEND_WORKSPACE_DIRECTORY"

buildServer()
{ 
    docker build -t custom_node -f $FLUTTER_BACKEND_WORKSPACE_DIRECTORY/tools/docker/node .
}
runServer() {
    docker-compose --env-file $FLUTTER_WORKSPACE_DIRECTORY/tools/docker/compose_dev.env -f $FLUTTER_WORKSPACE_DIRECTORY/tools/docker/docker-compose.yml up    

    #If mongo start fail : run the command : sudo rm -rf /tmp/mongodb-27017.sock
}

importFakeCottages() {
    mongoimport --jsonArray --db myapp --collection cottages --file $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY/assets/cottages.json
}

cleanDb() {
    mongo myapp --eval "db.dropDatabase()"
}

#Check if analyze and format command returns ok
checkPaulette() {
    dart format --set-exit-if-changed $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY &&
        flutter analyze $FLUTTER_FRONTEND_WORKSPACE_DIRECTORY 
}

pushPaulette() {
    checkPaulette &&
        git push origin $1
}

installPaulette() {
    session=$(bw unlock --raw)

    bw sync --session $session

    credentials=$(bw get password BACKEND_GOOGLE_CREDENTIALS --session $session) &&
        rm -f $CREDENTIALS_FOLDER/credentials.json &&
        echo $credentials >>$CREDENTIALS_FOLDER/credentials.json

    tokens=$(bw get password BACKEND_GOOGLE_TOKEN --session $session) &&
        rm -f $CREDENTIALS_FOLDER/token.json &&
        echo $tokens >>$CREDENTIALS_FOLDER/token.json

    oauth_config=$(bw get password BACKEND_OAUTH_CONFIG --session $session) &&
        rm -f $CREDENTIALS_FOLDER/oauth_config.json &&
        echo $oauth_config >>$CREDENTIALS_FOLDER/oauth_config.json


    #Get Android sign key from bitwarden, format it, and then import it in debug.keystore thanks to gpg
    #Check this tutorial to see why we do that : https://stefma.medium.com/how-to-store-a-android-keystore-safely-on-github-actions-f0cef9413784
    android_signkey=$(bw get password ANDROID_SIGNKEY --session $session)
    android_signkey="-----BEGIN PGP MESSAGE-----\n\n"${android_signkey// /$'\n'}"-----END PGP MESSAGE-----" &&
        rm -f /tmp/android_signkey.asc &&
        echo -e $android_signkey >>/tmp/android_signkey.asc


    gpg -d --passphrase arandompassphrase --batch /tmp/android_signkey.asc  > ~/.android/debug.keystore
    rm -f /tmp/android_signkey.asc
}

createTablet() {
        name="Tablet"
        echo -ne "n\n" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n $name -k "system-images;android-29;google_apis;x86" --force
        bash -c "echo "hw.lcd.density=213" >> $HOME/.android/avd/$name.avd/config.ini"
        bash -c "echo "hw.lcd.height=1280" >> $HOME/.android/avd/$name.avd/config.ini"
        bash -c "echo "hw.lcd.width=800" >> $HOME/.android/avd/$name.avd/config.ini"
        bash -c "echo "hw.mainKeys=no" >> $HOME/.android/avd/$name.avd/config.ini"
}


startEmulator() {
    set -e

    if [ "`adb shell getprop sys.boot_completed | tr -d '\r' `" != "1" ]; then

       $ANDROID_HOME/emulator/emulator -avd $1 -gpu off -no-audio -dns-server 8.8.8.8 -skin 800x1280 $2 &

       #Wait for the emulator to boot
       echo "Waiting For the emulator to be online"
       while [ "`adb shell getprop sys.boot_completed | tr -d '\r' `" != "1" ] ; do sleep 1; done
    fi;
}

#Create Android Emulators
#createTablet